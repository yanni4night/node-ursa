#!/usr/bin/env node

/**
 * Module dependencies.
 */

var exec = require('child_process').exec,
  program = require('commander'), //v1.2.0
  pkg = require('../package.json'),
  version = pkg.version,
  os = require('os'),
  fs = require('fs'),
  sysPath = require('path'),
  utils=require("../lib/utils");

// CLI
program
  .version(version)
  .usage('[options] ')
  .option('-i,--init [path]', 'Initialize the environment')
  .option('-b,--build [item]', 'Build target')
  .option('-c,--compress', 'Compress js&css')
  .option('-h,--html', 'Generate html')
  .option('-s,--start [port]', 'Start ursa server')
  .option('-v,--version', "Show version")
  .parse(process.argv);

if (program.init) {
  var path = ".";
  if ('boolean' !== typeof program.init) {
    path = program.init;
  }

  //Create at target path if exists
  if (fs.existsSync(path))
    createApplication(path);
  else
    abort(path + " does not exist");

} else if (program.start) {
  var ursa = require('../lib/ursa');
  var app = ursa.getInstance();
  var port = +program.start;
  app.listen((port > 1024 && port < 65535) ? port : 8899);

} else if (program.build) {

  if ('boolean' === typeof program.build || !program.build || program.build.constructor == Boolean)
    program.build = null;
  //按需加载，避免在Initialize时对build产生影响
  var build = require('../lib/build');
  return build(program.build, !! program.compress, !! program.html);

} else {
  console.log("init an app:\r\n".debug, "$node-ursa --init".info, "\r\nor\r\n".warn, "$node-ursa -i".info);
  console.log("build an app:\r\n".debug, "$node-ursa --build [project]".info, "\r\nor\r\n".warn, "$node-ursa -b [project]".info);
  console.log("compress css&js files:\r\n".debug, "$node-ursa --build [project] --compress".info, "\r\nor\r\n".warn, "$node-ursa -b [project] -c".info);
  console.log("generate html files:\r\n".debug, "$node-ursa --build [project] --html".info, "\r\nor\r\n".warn, "$node-ursa -b [project] -h".info);
  console.log("start the server:\r\n".debug, "$node-ursa --start [port]".info, "\r\nor\r\n".warn, "$node-ursa -s [port]".info);
  console.log("see more:");
  console.log("https://github.com/yanni4night/node-ursa".info);
  console.log();
  console.log("#    #  ####  #####  ######    #    # #####   ####    ##   ".cmd);
  console.log("##   # #    # #    # #         #    # #    # #       #  #  ".cmd);
  console.log("# #  # #    # #    # #####     #    # #    #  ####  #    # ".cmd);
  console.log("#  # # #    # #    # #         #    # #####       # ###### ".cmd);
  console.log("#   ## #    # #    # #         #    # #   #  #    # #    # ".cmd);
  console.log("#    #  ####  #####  ######     ####  #    #  ####  #    # ".cmd);
  console.log();
}

/**
 * [createApplication description]
 * @param  {type} path [description]
 * @return {type}      [description]
 */

function createApplication(path) {
  emptyDirectory(path, function(empty) {
    if (empty) {
      createApplicationAt(path);
    } else {
      program.confirm('Directory is not empty, continue?', function(ok) {
        if (ok) {
          process.stdin.destroy();
          createApplicationAt(path);
        } else {
          abort('Initializing gave up');
        }
      });
    }
  });
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplicationAt(path) {
  process.on('exit', function() {
    console.log();
    console.log('   run the app:'.verbose);
    console.log('     $ node-ursa --start [port]'.verbose);
    console.log('   build the app:'.verbose);
    console.log('     $ node-ursa --build [environment] [--compress] [--html]'.verbose);
    console.log();
  });

  console.log("copying files...".debug);
  console.log("%s".cmd, exec("cp -R " + sysPath.join(__dirname, "../clo/*") + " " + path));
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  console.log("%s".debug, path)
  fs.readdir(path, function(err, files) {
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
  console.error("%s".error, str);
  process.exit(1);
}